Checks: >
  -*,
  bugprone-assignment-in-if-condition,
  bugprone-bool-pointer-implicit-conversion,
  bugprone-branch-clone,
  bugprone-casting-through-void,
  bugprone-chained-comparison,
  bugprone-compare-pointer-to-member-virtual-function,
  bugprone-copy-constructor-init,
  bugprone-dangling-handle,
  bugprone-dynamic-static-initializers,
  bugprone-empty-catch,
  bugprone-exception-escape,
  bugprone-fold-init-type,
  bugprone-forwarding-reference-overload,
  bugprone-implicit-widening-of-multiplication-result,
  bugprone-inaccurate-erase,
  bugprone-inc-dec-in-conditions,
  bugprone-incorrect-enable-if,
  bugprone-incorrect-roundings,
  bugprone-infinite-loop,
  bugprone-integer-division,
  bugprone-misplaced-widening-cast,
  bugprone-multi-level-implicit-pointer-conversion,
  bugprone-nondeterministic-pointer-iteration-order,
  bugprone-non-zero-enum-to-bool-conversion,
  bugprone-optional-value-conversion,
  bugprone-parent-virtual-call,
  bugprone-redundant-branch-condition,
  bugprone-reserved-identifier,
  bugprone-return-const-ref-from-parameter,
  bugprone-shared-ptr-array-mismatch,
  bugprone-sizeof-container,
  bugprone-sizeof-expression,
  bugprone-standalone-empty,
  bugprone-string-constructor,
  bugprone-string-integer-assignment,
  bugprone-string-literal-with-embedded-nul,
  bugprone-stringview-nullptr,
  bugprone-suspicious-include,
  bugprone-suspicious-missing-comma,
  bugprone-suspicious-semicolon,
  bugprone-swapped-arguments,
  bugprone-switch-missing-default-case,
  bugprone-throw-keyword-missing,
  bugprone-too-small-loop-variable,
  bugprone-unchecked-optional-access,
  bugprone-undelegated-constructor,
  bugprone-unhandled-self-assignment,
  bugprone-unused-local-non-trivial-variable,
  bugprone-unused-return-value,
  bugprone-use-after-move,
  bugprone-virtual-near-miss,
  cert-dcl58-cpp,
  cert-flp30-c,
  cppcoreguidelines-avoid-const-or-ref-data-members,
  cppcoreguidelines-avoid-do-while,
  cppcoreguidelines-avoid-goto,
  cppcoreguidelines-avoid-non-const-global-variables,
  cppcoreguidelines-init-variables,
  cppcoreguidelines-macro-usage,
  cppcoreguidelines-misleading-capture-default-by-value,
  cppcoreguidelines-narrowing-conversions,
  cppcoreguidelines-no-malloc,
  cppcoreguidelines-prefer-member-initializer,
  cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  cppcoreguidelines-pro-bounds-constant-array-index,
  cppcoreguidelines-pro-bounds-pointer-arithmetic,
  cppcoreguidelines-pro-type-cstyle-cast,
  cppcoreguidelines-pro-type-member-init,
  cppcoreguidelines-pro-type-static-cast-downcast,
  cppcoreguidelines-rvalue-reference-param-not-moved,
  cppcoreguidelines-slicing,
  cppcoreguidelines-special-member-functions,
  cppcoreguidelines-virtual-class-destructor,
  llvm-header-guard,
  llvm-include-order,
  misc-confusable-identifiers,
  misc-header-include-cycle,
  misc-include-cleaner,
  misc-misleading-identifier,
  misc-misplaced-const,
  misc-non-private-member-variables-in-classes,
  misc-redundant-expression,
  misc-throw-by-value-catch-by-reference,
  misc-unused-parameters,
  misc-use-anonymous-namespace,
  modernize-avoid-bind,
  modernize-avoid-c-arrays,
  modernize-concat-nested-namespaces,
  modernize-deprecated-headers,
  modernize-deprecated-ios-base-aliases,
  modernize-make-shared,
  modernize-make-unique,
  modernize-min-max-use-initializer-list,
  modernize-return-braced-init-list,
  modernize-use-bool-literals,
  modernize-use-designated-initializers,
  modernize-use-emplace,
  modernize-use-equals-default,
  modernize-use-equals-delete,
  modernize-use-nodiscard,
  modernize-use-nullptr,
  modernize-use-override,
  modernize-use-ranges,
  modernize-use-starts-ends-with,
  modernize-use-using,
  performance-enum-size,
  performance-faster-string-find,
  performance-for-range-copy,
  performance-inefficient-algorithm,
  performance-inefficient-string-concatenation,
  readability-avoid-const-params-in-decls,
  readability-avoid-return-with-void-value,
  readability-const-return-type,
  readability-container-contains,
  readability-container-data-pointer,
  readability-container-size-empty,
  readability-convert-member-functions-to-static,
  readability-delete-null-pointer,
  readability-duplicate-include,
  readability-else-after-return,
  readability-enum-initial-value,
  readability-implicit-bool-conversion,
  readability-inconsistent-declaration-parameter-name,
  readability-isolate-declaration,
  readability-magic-numbers,
  readability-make-member-function-const,
  readability-math-missing-parentheses,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  readability-named-parameter,
  readability-non-const-parameter,
  readability-qualified-auto,
  readability-redundant-access-specifiers,
  readability-redundant-casting,
  readability-redundant-control-flow,
  readability-redundant-declaration,
  readability-redundant-inline-specifier,
  readability-redundant-member-init,
  readability-redundant-preprocessor,
  readability-redundant-smartptr-get,
  readability-redundant-string-cstr,
  readability-redundant-string-init,
  readability-reference-to-constructed-temporary,
  readability-simplify-boolean-expr,
  readability-simplify-boolean-expr,
  readability-static-accessed-through-instance,
  readability-static-definition-in-anonymous-namespace,
  readability-string-compare,
CheckOptions:
  - { key: bugprone-misplaced-widening-cast.CheckImplicitCasts, value: true }
  - { key: readability-identifier-naming.ClassCase, value: CamelBack }
  - { key: readability-identifier-naming.FunctionCase, value: camelBack }
  - { key: readability-identifier-naming.VariableCase, value: camelBack }
  - { key: readability-identifier-naming.ParameterCase, value: camelBack }
  - { key: readability-identifier-naming.MemberCase, value: camelBack }
  - { key: readability-identifier-naming.ProtectedMemberPrefix, value: m_ }
  - { key: readability-identifier-naming.PrivateMemberPrefix, value: m_ }
UseColor: true
